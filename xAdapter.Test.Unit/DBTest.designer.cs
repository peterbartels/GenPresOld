#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace xData.Test.Unit
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class DBTestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestTable(TestTable instance);
    partial void UpdateTestTable(TestTable instance);
    partial void DeleteTestTable(TestTable instance);
    partial void InsertSubTestTable(SubTestTable instance);
    partial void UpdateSubTestTable(SubTestTable instance);
    partial void DeleteSubTestTable(SubTestTable instance);
    #endregion
		
		public DBTestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBTestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBTestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBTestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestTable> TestTable
		{
			get
			{
				return this.GetTable<TestTable>();
			}
		}
		
		public System.Data.Linq.Table<SubTestTable> SubTestTable
		{
			get
			{
				return this.GetTable<SubTestTable>();
			}
		}
	}
	
	[Table(Name="")]
	public partial class TestTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _SubTestTable;
		
		private EntityRef<SubTestTable> _SubTestTable1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubTestTableChanging(int value);
    partial void OnSubTestTableChanged();
    #endregion
		
		public TestTable()
		{
			this._SubTestTable1 = default(EntityRef<SubTestTable>);
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubTestTable")]
		public int SubTestTable
		{
			get
			{
				return this._SubTestTable;
			}
			set
			{
				if ((this._SubTestTable != value))
				{
					if (this._SubTestTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubTestTableChanging(value);
					this.SendPropertyChanging();
					this._SubTestTable = value;
					this.SendPropertyChanged("SubTestTable");
					this.OnSubTestTableChanged();
				}
			}
		}
		
		[Association(Name="SubTestTable_TestTable", Storage="_SubTestTable1", ThisKey="SubTestTable", OtherKey="Id", IsForeignKey=true)]
		public SubTestTable SubTestTable1
		{
			get
			{
				return this._SubTestTable1.Entity;
			}
			set
			{
				SubTestTable previousValue = this._SubTestTable1.Entity;
				if (((previousValue != value) 
							|| (this._SubTestTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubTestTable1.Entity = null;
						previousValue.TestTable.Remove(this);
					}
					this._SubTestTable1.Entity = value;
					if ((value != null))
					{
						value.TestTable.Add(this);
						this._SubTestTable = value.Id;
					}
					else
					{
						this._SubTestTable = default(int);
					}
					this.SendPropertyChanged("SubTestTable1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class SubTestTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SubName;
		
		private EntitySet<TestTable> _TestTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubNameChanging(string value);
    partial void OnSubNameChanged();
    #endregion
		
		public SubTestTable()
		{
			this._TestTable = new EntitySet<TestTable>(new Action<TestTable>(this.attach_TestTable), new Action<TestTable>(this.detach_TestTable));
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubName", CanBeNull=false)]
		public string SubName
		{
			get
			{
				return this._SubName;
			}
			set
			{
				if ((this._SubName != value))
				{
					this.OnSubNameChanging(value);
					this.SendPropertyChanging();
					this._SubName = value;
					this.SendPropertyChanged("SubName");
					this.OnSubNameChanged();
				}
			}
		}
		
		[Association(Name="SubTestTable_TestTable", Storage="_TestTable", ThisKey="Id", OtherKey="SubTestTable")]
		public EntitySet<TestTable> TestTable
		{
			get
			{
				return this._TestTable;
			}
			set
			{
				this._TestTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestTable(TestTable entity)
		{
			this.SendPropertyChanging();
			entity.SubTestTable1 = this;
		}
		
		private void detach_TestTable(TestTable entity)
		{
			this.SendPropertyChanging();
			entity.SubTestTable1 = null;
		}
	}
}
#pragma warning restore 1591
