#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenPres.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GenPres")]
	public partial class PrescriptionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComponent(Component instance);
    partial void UpdateComponent(Component instance);
    partial void DeleteComponent(Component instance);
    partial void InsertUnitValue(UnitValue instance);
    partial void UpdateUnitValue(UnitValue instance);
    partial void DeleteUnitValue(UnitValue instance);
    partial void InsertDose(Dose instance);
    partial void UpdateDose(Dose instance);
    partial void DeleteDose(Dose instance);
    partial void InsertDrug(Drug instance);
    partial void UpdateDrug(Drug instance);
    partial void DeleteDrug(Drug instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertSubstance(Substance instance);
    partial void UpdateSubstance(Substance instance);
    partial void DeleteSubstance(Substance instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public PrescriptionDataContext() : 
				base(global::GenPres.Database.Properties.Settings.Default.GenPresConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Component> Components
		{
			get
			{
				return this.GetTable<Component>();
			}
		}
		
		public System.Data.Linq.Table<UnitValue> UnitValues
		{
			get
			{
				return this.GetTable<UnitValue>();
			}
		}
		
		public System.Data.Linq.Table<Dose> Doses
		{
			get
			{
				return this.GetTable<Dose>();
			}
		}
		
		public System.Data.Linq.Table<Drug> Drugs
		{
			get
			{
				return this.GetTable<Drug>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<Substance> Substances
		{
			get
			{
				return this.GetTable<Substance>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Component")]
	public partial class Component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DrugId;
		
		private string _ComponentName;
		
		private System.Nullable<bool> _IsSolution;
		
		private System.Nullable<double> _SolutionRelation;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _DrugConcentration;
		
		private EntitySet<Substance> _Substances;
		
		private EntityRef<UnitValue> _UnitValue;
		
		private EntityRef<UnitValue> _UnitValue1;
		
		private EntityRef<Drug> _Drug;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrugIdChanging(int value);
    partial void OnDrugIdChanged();
    partial void OnComponentNameChanging(string value);
    partial void OnComponentNameChanged();
    partial void OnIsSolutionChanging(System.Nullable<bool> value);
    partial void OnIsSolutionChanged();
    partial void OnSolutionRelationChanging(System.Nullable<double> value);
    partial void OnSolutionRelationChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnDrugConcentrationChanging(System.Nullable<int> value);
    partial void OnDrugConcentrationChanged();
    #endregion
		
		public Component()
		{
			this._Substances = new EntitySet<Substance>(new Action<Substance>(this.attach_Substances), new Action<Substance>(this.detach_Substances));
			this._UnitValue = default(EntityRef<UnitValue>);
			this._UnitValue1 = default(EntityRef<UnitValue>);
			this._Drug = default(EntityRef<Drug>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugId", DbType="Int NOT NULL")]
		public int DrugId
		{
			get
			{
				return this._DrugId;
			}
			set
			{
				if ((this._DrugId != value))
				{
					if (this._Drug.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugIdChanging(value);
					this.SendPropertyChanging();
					this._DrugId = value;
					this.SendPropertyChanged("DrugId");
					this.OnDrugIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentName", DbType="NVarChar(MAX)")]
		public string ComponentName
		{
			get
			{
				return this._ComponentName;
			}
			set
			{
				if ((this._ComponentName != value))
				{
					this.OnComponentNameChanging(value);
					this.SendPropertyChanging();
					this._ComponentName = value;
					this.SendPropertyChanged("ComponentName");
					this.OnComponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSolution", DbType="Bit")]
		public System.Nullable<bool> IsSolution
		{
			get
			{
				return this._IsSolution;
			}
			set
			{
				if ((this._IsSolution != value))
				{
					this.OnIsSolutionChanging(value);
					this.SendPropertyChanging();
					this._IsSolution = value;
					this.SendPropertyChanged("IsSolution");
					this.OnIsSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionRelation", DbType="Float")]
		public System.Nullable<double> SolutionRelation
		{
			get
			{
				return this._SolutionRelation;
			}
			set
			{
				if ((this._SolutionRelation != value))
				{
					this.OnSolutionRelationChanging(value);
					this.SendPropertyChanging();
					this._SolutionRelation = value;
					this.SendPropertyChanged("SolutionRelation");
					this.OnSolutionRelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					if (this._UnitValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugConcentration", DbType="Int")]
		public System.Nullable<int> DrugConcentration
		{
			get
			{
				return this._DrugConcentration;
			}
			set
			{
				if ((this._DrugConcentration != value))
				{
					if (this._UnitValue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugConcentrationChanging(value);
					this.SendPropertyChanging();
					this._DrugConcentration = value;
					this.SendPropertyChanged("DrugConcentration");
					this.OnDrugConcentrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Substance", Storage="_Substances", ThisKey="Id", OtherKey="ComponentId")]
		public EntitySet<Substance> Substances
		{
			get
			{
				return this._Substances;
			}
			set
			{
				this._Substances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Component", Storage="_UnitValue", ThisKey="Quantity", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue
		{
			get
			{
				return this._UnitValue.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue.Entity = null;
						previousValue.Components.Remove(this);
					}
					this._UnitValue.Entity = value;
					if ((value != null))
					{
						value.Components.Add(this);
						this._Quantity = value.Id;
					}
					else
					{
						this._Quantity = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Component1", Storage="_UnitValue1", ThisKey="DrugConcentration", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue1
		{
			get
			{
				return this._UnitValue1.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue1.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue1.Entity = null;
						previousValue.Components1.Remove(this);
					}
					this._UnitValue1.Entity = value;
					if ((value != null))
					{
						value.Components1.Add(this);
						this._DrugConcentration = value.Id;
					}
					else
					{
						this._DrugConcentration = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_Component", Storage="_Drug", ThisKey="DrugId", OtherKey="Id", IsForeignKey=true)]
		public Drug Drug
		{
			get
			{
				return this._Drug.Entity;
			}
			set
			{
				Drug previousValue = this._Drug.Entity;
				if (((previousValue != value) 
							|| (this._Drug.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drug.Entity = null;
						previousValue.Components.Remove(this);
					}
					this._Drug.Entity = value;
					if ((value != null))
					{
						value.Components.Add(this);
						this._DrugId = value.Id;
					}
					else
					{
						this._DrugId = default(int);
					}
					this.SendPropertyChanged("Drug");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Substances(Substance entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_Substances(Substance entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitValue")]
	public partial class UnitValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BaseValue;
		
		private string _Unit;
		
		private System.Nullable<double> _Value;
		
		private string _UIState;
		
		private string _Time;
		
		private string _Total;
		
		private string _Adjust;
		
		private EntitySet<Component> _Components;
		
		private EntitySet<Component> _Components1;
		
		private EntitySet<Dose> _Doses;
		
		private EntitySet<Dose> _Doses1;
		
		private EntitySet<Dose> _Doses2;
		
		private EntitySet<Drug> _Drugs;
		
		private EntitySet<Medicine> _Medicines;
		
		private EntitySet<Medicine> _Medicines1;
		
		private EntitySet<Medicine> _Medicines2;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntitySet<Prescription> _Prescriptions1;
		
		private EntitySet<Prescription> _Prescriptions2;
		
		private EntitySet<Prescription> _Prescriptions3;
		
		private EntitySet<Prescription> _Prescriptions4;
		
		private EntitySet<Prescription> _Prescriptions5;
		
		private EntitySet<Prescription> _Prescriptions6;
		
		private EntitySet<Substance> _Substances;
		
		private EntitySet<Substance> _Substances1;
		
		private EntitySet<Substance> _Substances2;
		
		private EntitySet<Substance> _Substances3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBaseValueChanging(System.Nullable<double> value);
    partial void OnBaseValueChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnUIStateChanging(string value);
    partial void OnUIStateChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnAdjustChanging(string value);
    partial void OnAdjustChanged();
    #endregion
		
		public UnitValue()
		{
			this._Components = new EntitySet<Component>(new Action<Component>(this.attach_Components), new Action<Component>(this.detach_Components));
			this._Components1 = new EntitySet<Component>(new Action<Component>(this.attach_Components1), new Action<Component>(this.detach_Components1));
			this._Doses = new EntitySet<Dose>(new Action<Dose>(this.attach_Doses), new Action<Dose>(this.detach_Doses));
			this._Doses1 = new EntitySet<Dose>(new Action<Dose>(this.attach_Doses1), new Action<Dose>(this.detach_Doses1));
			this._Doses2 = new EntitySet<Dose>(new Action<Dose>(this.attach_Doses2), new Action<Dose>(this.detach_Doses2));
			this._Drugs = new EntitySet<Drug>(new Action<Drug>(this.attach_Drugs), new Action<Drug>(this.detach_Drugs));
			this._Medicines = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicines), new Action<Medicine>(this.detach_Medicines));
			this._Medicines1 = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicines1), new Action<Medicine>(this.detach_Medicines1));
			this._Medicines2 = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicines2), new Action<Medicine>(this.detach_Medicines2));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Prescriptions1 = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions1), new Action<Prescription>(this.detach_Prescriptions1));
			this._Prescriptions2 = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions2), new Action<Prescription>(this.detach_Prescriptions2));
			this._Prescriptions3 = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions3), new Action<Prescription>(this.detach_Prescriptions3));
			this._Prescriptions4 = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions4), new Action<Prescription>(this.detach_Prescriptions4));
			this._Prescriptions5 = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions5), new Action<Prescription>(this.detach_Prescriptions5));
			this._Prescriptions6 = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions6), new Action<Prescription>(this.detach_Prescriptions6));
			this._Substances = new EntitySet<Substance>(new Action<Substance>(this.attach_Substances), new Action<Substance>(this.detach_Substances));
			this._Substances1 = new EntitySet<Substance>(new Action<Substance>(this.attach_Substances1), new Action<Substance>(this.detach_Substances1));
			this._Substances2 = new EntitySet<Substance>(new Action<Substance>(this.attach_Substances2), new Action<Substance>(this.detach_Substances2));
			this._Substances3 = new EntitySet<Substance>(new Action<Substance>(this.attach_Substances3), new Action<Substance>(this.detach_Substances3));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseValue", DbType="Float")]
		public System.Nullable<double> BaseValue
		{
			get
			{
				return this._BaseValue;
			}
			set
			{
				if ((this._BaseValue != value))
				{
					this.OnBaseValueChanging(value);
					this.SendPropertyChanging();
					this._BaseValue = value;
					this.SendPropertyChanged("BaseValue");
					this.OnBaseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(MAX)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIState", DbType="NVarChar(MAX)")]
		public string UIState
		{
			get
			{
				return this._UIState;
			}
			set
			{
				if ((this._UIState != value))
				{
					this.OnUIStateChanging(value);
					this.SendPropertyChanging();
					this._UIState = value;
					this.SendPropertyChanged("UIState");
					this.OnUIStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(MAX)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="NVarChar(MAX)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adjust", DbType="NVarChar(MAX)")]
		public string Adjust
		{
			get
			{
				return this._Adjust;
			}
			set
			{
				if ((this._Adjust != value))
				{
					this.OnAdjustChanging(value);
					this.SendPropertyChanging();
					this._Adjust = value;
					this.SendPropertyChanged("Adjust");
					this.OnAdjustChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Component", Storage="_Components", ThisKey="Id", OtherKey="Quantity")]
		public EntitySet<Component> Components
		{
			get
			{
				return this._Components;
			}
			set
			{
				this._Components.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Component1", Storage="_Components1", ThisKey="Id", OtherKey="DrugConcentration")]
		public EntitySet<Component> Components1
		{
			get
			{
				return this._Components1;
			}
			set
			{
				this._Components1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Dose", Storage="_Doses", ThisKey="Id", OtherKey="Quantity")]
		public EntitySet<Dose> Doses
		{
			get
			{
				return this._Doses;
			}
			set
			{
				this._Doses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Dose1", Storage="_Doses1", ThisKey="Id", OtherKey="Total")]
		public EntitySet<Dose> Doses1
		{
			get
			{
				return this._Doses1;
			}
			set
			{
				this._Doses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Dose2", Storage="_Doses2", ThisKey="Id", OtherKey="Rate")]
		public EntitySet<Dose> Doses2
		{
			get
			{
				return this._Doses2;
			}
			set
			{
				this._Doses2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Drug", Storage="_Drugs", ThisKey="Id", OtherKey="Quantity")]
		public EntitySet<Drug> Drugs
		{
			get
			{
				return this._Drugs;
			}
			set
			{
				this._Drugs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Medicine", Storage="_Medicines", ThisKey="Id", OtherKey="ComponentIncrement")]
		public EntitySet<Medicine> Medicines
		{
			get
			{
				return this._Medicines;
			}
			set
			{
				this._Medicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Medicine1", Storage="_Medicines1", ThisKey="Id", OtherKey="DoseIncrement")]
		public EntitySet<Medicine> Medicines1
		{
			get
			{
				return this._Medicines1;
			}
			set
			{
				this._Medicines1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Medicine2", Storage="_Medicines2", ThisKey="Id", OtherKey="Quantity")]
		public EntitySet<Medicine> Medicines2
		{
			get
			{
				return this._Medicines2;
			}
			set
			{
				this._Medicines2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="Frequency")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription1", Storage="_Prescriptions1", ThisKey="Id", OtherKey="Quantity")]
		public EntitySet<Prescription> Prescriptions1
		{
			get
			{
				return this._Prescriptions1;
			}
			set
			{
				this._Prescriptions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription2", Storage="_Prescriptions2", ThisKey="Id", OtherKey="Total")]
		public EntitySet<Prescription> Prescriptions2
		{
			get
			{
				return this._Prescriptions2;
			}
			set
			{
				this._Prescriptions2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription3", Storage="_Prescriptions3", ThisKey="Id", OtherKey="Rate")]
		public EntitySet<Prescription> Prescriptions3
		{
			get
			{
				return this._Prescriptions3;
			}
			set
			{
				this._Prescriptions3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription4", Storage="_Prescriptions4", ThisKey="Id", OtherKey="Time")]
		public EntitySet<Prescription> Prescriptions4
		{
			get
			{
				return this._Prescriptions4;
			}
			set
			{
				this._Prescriptions4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription5", Storage="_Prescriptions5", ThisKey="Id", OtherKey="AdjustLength")]
		public EntitySet<Prescription> Prescriptions5
		{
			get
			{
				return this._Prescriptions5;
			}
			set
			{
				this._Prescriptions5.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription6", Storage="_Prescriptions6", ThisKey="Id", OtherKey="AdjustWeight")]
		public EntitySet<Prescription> Prescriptions6
		{
			get
			{
				return this._Prescriptions6;
			}
			set
			{
				this._Prescriptions6.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance", Storage="_Substances", ThisKey="Id", OtherKey="ComponentConcentration")]
		public EntitySet<Substance> Substances
		{
			get
			{
				return this._Substances;
			}
			set
			{
				this._Substances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance1", Storage="_Substances1", ThisKey="Id", OtherKey="DrugConcentration")]
		public EntitySet<Substance> Substances1
		{
			get
			{
				return this._Substances1;
			}
			set
			{
				this._Substances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance2", Storage="_Substances2", ThisKey="Id", OtherKey="Quantity")]
		public EntitySet<Substance> Substances2
		{
			get
			{
				return this._Substances2;
			}
			set
			{
				this._Substances2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance3", Storage="_Substances3", ThisKey="Id", OtherKey="CustomIncrement")]
		public EntitySet<Substance> Substances3
		{
			get
			{
				return this._Substances3;
			}
			set
			{
				this._Substances3.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = this;
		}
		
		private void detach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = null;
		}
		
		private void attach_Components1(Component entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = this;
		}
		
		private void detach_Components1(Component entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = null;
		}
		
		private void attach_Doses(Dose entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = this;
		}
		
		private void detach_Doses(Dose entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = null;
		}
		
		private void attach_Doses1(Dose entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = this;
		}
		
		private void detach_Doses1(Dose entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = null;
		}
		
		private void attach_Doses2(Dose entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = this;
		}
		
		private void detach_Doses2(Dose entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = null;
		}
		
		private void attach_Drugs(Drug entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = this;
		}
		
		private void detach_Drugs(Drug entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = null;
		}
		
		private void attach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = this;
		}
		
		private void detach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = null;
		}
		
		private void attach_Medicines1(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = this;
		}
		
		private void detach_Medicines1(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = null;
		}
		
		private void attach_Medicines2(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = this;
		}
		
		private void detach_Medicines2(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = null;
		}
		
		private void attach_Prescriptions1(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = this;
		}
		
		private void detach_Prescriptions1(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = null;
		}
		
		private void attach_Prescriptions2(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = this;
		}
		
		private void detach_Prescriptions2(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = null;
		}
		
		private void attach_Prescriptions3(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue3 = this;
		}
		
		private void detach_Prescriptions3(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue3 = null;
		}
		
		private void attach_Prescriptions4(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue4 = this;
		}
		
		private void detach_Prescriptions4(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue4 = null;
		}
		
		private void attach_Prescriptions5(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue5 = this;
		}
		
		private void detach_Prescriptions5(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue5 = null;
		}
		
		private void attach_Prescriptions6(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue6 = this;
		}
		
		private void detach_Prescriptions6(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue6 = null;
		}
		
		private void attach_Substances(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = this;
		}
		
		private void detach_Substances(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue = null;
		}
		
		private void attach_Substances1(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = this;
		}
		
		private void detach_Substances1(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue1 = null;
		}
		
		private void attach_Substances2(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = this;
		}
		
		private void detach_Substances2(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue2 = null;
		}
		
		private void attach_Substances3(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue3 = this;
		}
		
		private void detach_Substances3(Substance entity)
		{
			this.SendPropertyChanging();
			entity.UnitValue3 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dose")]
	public partial class Dose : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PrescriptionId;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Rate;
		
		private EntityRef<UnitValue> _UnitValue;
		
		private EntityRef<UnitValue> _UnitValue1;
		
		private EntityRef<UnitValue> _UnitValue2;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPrescriptionIdChanging(int value);
    partial void OnPrescriptionIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    #endregion
		
		public Dose()
		{
			this._UnitValue = default(EntityRef<UnitValue>);
			this._UnitValue1 = default(EntityRef<UnitValue>);
			this._UnitValue2 = default(EntityRef<UnitValue>);
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionId", DbType="Int NOT NULL")]
		public int PrescriptionId
		{
			get
			{
				return this._PrescriptionId;
			}
			set
			{
				if ((this._PrescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionId = value;
					this.SendPropertyChanged("PrescriptionId");
					this.OnPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					if (this._UnitValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					if (this._UnitValue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					if (this._UnitValue2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Dose", Storage="_UnitValue", ThisKey="Quantity", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue
		{
			get
			{
				return this._UnitValue.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue.Entity = null;
						previousValue.Doses.Remove(this);
					}
					this._UnitValue.Entity = value;
					if ((value != null))
					{
						value.Doses.Add(this);
						this._Quantity = value.Id;
					}
					else
					{
						this._Quantity = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Dose1", Storage="_UnitValue1", ThisKey="Total", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue1
		{
			get
			{
				return this._UnitValue1.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue1.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue1.Entity = null;
						previousValue.Doses1.Remove(this);
					}
					this._UnitValue1.Entity = value;
					if ((value != null))
					{
						value.Doses1.Add(this);
						this._Total = value.Id;
					}
					else
					{
						this._Total = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Dose2", Storage="_UnitValue2", ThisKey="Rate", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue2
		{
			get
			{
				return this._UnitValue2.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue2.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue2.Entity = null;
						previousValue.Doses2.Remove(this);
					}
					this._UnitValue2.Entity = value;
					if ((value != null))
					{
						value.Doses2.Add(this);
						this._Rate = value.Id;
					}
					else
					{
						this._Rate = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Dose", Storage="_Prescription", ThisKey="PrescriptionId", OtherKey="Id", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.Doses.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.Doses.Add(this);
						this._PrescriptionId = value.Id;
					}
					else
					{
						this._PrescriptionId = default(int);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drug")]
	public partial class Drug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Shape;
		
		private string _Route;
		
		private string _SolutionType;
		
		private System.Nullable<int> _Quantity;
		
		private EntitySet<Component> _Components;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<UnitValue> _UnitValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShapeChanging(string value);
    partial void OnShapeChanged();
    partial void OnRouteChanging(string value);
    partial void OnRouteChanged();
    partial void OnSolutionTypeChanging(string value);
    partial void OnSolutionTypeChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public Drug()
		{
			this._Components = new EntitySet<Component>(new Action<Component>(this.attach_Components), new Action<Component>(this.detach_Components));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._UnitValue = default(EntityRef<UnitValue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shape", DbType="NVarChar(MAX)")]
		public string Shape
		{
			get
			{
				return this._Shape;
			}
			set
			{
				if ((this._Shape != value))
				{
					this.OnShapeChanging(value);
					this.SendPropertyChanging();
					this._Shape = value;
					this.SendPropertyChanged("Shape");
					this.OnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route", DbType="NVarChar(MAX)")]
		public string Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				if ((this._Route != value))
				{
					this.OnRouteChanging(value);
					this.SendPropertyChanging();
					this._Route = value;
					this.SendPropertyChanged("Route");
					this.OnRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionType", DbType="NVarChar(MAX)")]
		public string SolutionType
		{
			get
			{
				return this._SolutionType;
			}
			set
			{
				if ((this._SolutionType != value))
				{
					this.OnSolutionTypeChanging(value);
					this.SendPropertyChanging();
					this._SolutionType = value;
					this.SendPropertyChanged("SolutionType");
					this.OnSolutionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					if (this._UnitValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_Component", Storage="_Components", ThisKey="Id", OtherKey="DrugId")]
		public EntitySet<Component> Components
		{
			get
			{
				return this._Components;
			}
			set
			{
				this._Components.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="DrugId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Drug", Storage="_UnitValue", ThisKey="Quantity", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue
		{
			get
			{
				return this._UnitValue.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue.Entity = null;
						previousValue.Drugs.Remove(this);
					}
					this._UnitValue.Entity = value;
					if ((value != null))
					{
						value.Drugs.Add(this);
						this._Quantity = value.Id;
					}
					else
					{
						this._Quantity = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.Drug = this;
		}
		
		private void detach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.Drug = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Drug = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Drug = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _GenericName;
		
		private string _ShapeName;
		
		private string _RouteName;
		
		private System.Nullable<int> _ComponentIncrement;
		
		private System.Nullable<int> _DoseIncrement;
		
		private System.Nullable<int> _Quantity;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<UnitValue> _UnitValue;
		
		private EntityRef<UnitValue> _UnitValue1;
		
		private EntityRef<UnitValue> _UnitValue2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGenericNameChanging(string value);
    partial void OnGenericNameChanged();
    partial void OnShapeNameChanging(string value);
    partial void OnShapeNameChanged();
    partial void OnRouteNameChanging(string value);
    partial void OnRouteNameChanged();
    partial void OnComponentIncrementChanging(System.Nullable<int> value);
    partial void OnComponentIncrementChanged();
    partial void OnDoseIncrementChanging(System.Nullable<int> value);
    partial void OnDoseIncrementChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public Medicine()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._UnitValue = default(EntityRef<UnitValue>);
			this._UnitValue1 = default(EntityRef<UnitValue>);
			this._UnitValue2 = default(EntityRef<UnitValue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenericName", DbType="NVarChar(MAX)")]
		public string GenericName
		{
			get
			{
				return this._GenericName;
			}
			set
			{
				if ((this._GenericName != value))
				{
					this.OnGenericNameChanging(value);
					this.SendPropertyChanging();
					this._GenericName = value;
					this.SendPropertyChanged("GenericName");
					this.OnGenericNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShapeName", DbType="NVarChar(MAX)")]
		public string ShapeName
		{
			get
			{
				return this._ShapeName;
			}
			set
			{
				if ((this._ShapeName != value))
				{
					this.OnShapeNameChanging(value);
					this.SendPropertyChanging();
					this._ShapeName = value;
					this.SendPropertyChanged("ShapeName");
					this.OnShapeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteName", DbType="NVarChar(MAX)")]
		public string RouteName
		{
			get
			{
				return this._RouteName;
			}
			set
			{
				if ((this._RouteName != value))
				{
					this.OnRouteNameChanging(value);
					this.SendPropertyChanging();
					this._RouteName = value;
					this.SendPropertyChanged("RouteName");
					this.OnRouteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentIncrement", DbType="Int")]
		public System.Nullable<int> ComponentIncrement
		{
			get
			{
				return this._ComponentIncrement;
			}
			set
			{
				if ((this._ComponentIncrement != value))
				{
					if (this._UnitValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIncrementChanging(value);
					this.SendPropertyChanging();
					this._ComponentIncrement = value;
					this.SendPropertyChanged("ComponentIncrement");
					this.OnComponentIncrementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoseIncrement", DbType="Int")]
		public System.Nullable<int> DoseIncrement
		{
			get
			{
				return this._DoseIncrement;
			}
			set
			{
				if ((this._DoseIncrement != value))
				{
					if (this._UnitValue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoseIncrementChanging(value);
					this.SendPropertyChanging();
					this._DoseIncrement = value;
					this.SendPropertyChanged("DoseIncrement");
					this.OnDoseIncrementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					if (this._UnitValue2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="MedicineId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Medicine", Storage="_UnitValue", ThisKey="ComponentIncrement", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue
		{
			get
			{
				return this._UnitValue.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue.Entity = null;
						previousValue.Medicines.Remove(this);
					}
					this._UnitValue.Entity = value;
					if ((value != null))
					{
						value.Medicines.Add(this);
						this._ComponentIncrement = value.Id;
					}
					else
					{
						this._ComponentIncrement = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Medicine1", Storage="_UnitValue1", ThisKey="DoseIncrement", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue1
		{
			get
			{
				return this._UnitValue1.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue1.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue1.Entity = null;
						previousValue.Medicines1.Remove(this);
					}
					this._UnitValue1.Entity = value;
					if ((value != null))
					{
						value.Medicines1.Add(this);
						this._DoseIncrement = value.Id;
					}
					else
					{
						this._DoseIncrement = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Medicine2", Storage="_UnitValue2", ThisKey="Quantity", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue2
		{
			get
			{
				return this._UnitValue2.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue2.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue2.Entity = null;
						previousValue.Medicines2.Remove(this);
					}
					this._UnitValue2.Entity = value;
					if ((value != null))
					{
						value.Medicines2.Add(this);
						this._Quantity = value.Id;
					}
					else
					{
						this._Quantity = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _MedicationWeight;
		
		private System.Nullable<double> _Height;
		
		private string _PID;
		
		private EntitySet<Prescription> _Prescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMedicationWeightChanging(System.Nullable<double> value);
    partial void OnMedicationWeightChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    #endregion
		
		public Patient()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicationWeight", DbType="Float")]
		public System.Nullable<double> MedicationWeight
		{
			get
			{
				return this._MedicationWeight;
			}
			set
			{
				if ((this._MedicationWeight != value))
				{
					this.OnMedicationWeightChanging(value);
					this.SendPropertyChanging();
					this._MedicationWeight = value;
					this.SendPropertyChanged("MedicationWeight");
					this.OnMedicationWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(MAX)")]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Prescriptions", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PatientId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<bool> _Continuous;
		
		private System.Nullable<bool> _Infusion;
		
		private System.Nullable<bool> _Onrequest;
		
		private System.Nullable<bool> _Solution;
		
		private System.Nullable<bool> _IsTemplate;
		
		private string _State;
		
		private System.Nullable<bool> _TPN;
		
		private string _Remarks;
		
		private System.Nullable<int> _Frequency;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Rate;
		
		private System.Nullable<int> _Time;
		
		private System.Nullable<int> _AdjustLength;
		
		private System.Nullable<int> _AdjustWeight;
		
		private System.Nullable<int> _DrugId;
		
		private System.Nullable<int> _MedicineId;
		
		private EntitySet<Dose> _Doses;
		
		private EntityRef<UnitValue> _UnitValue;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<UnitValue> _UnitValue1;
		
		private EntityRef<UnitValue> _UnitValue2;
		
		private EntityRef<UnitValue> _UnitValue3;
		
		private EntityRef<UnitValue> _UnitValue4;
		
		private EntityRef<UnitValue> _UnitValue5;
		
		private EntityRef<UnitValue> _UnitValue6;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Drug> _Drug;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPatientIdChanging(System.Nullable<int> value);
    partial void OnPatientIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnContinuousChanging(System.Nullable<bool> value);
    partial void OnContinuousChanged();
    partial void OnInfusionChanging(System.Nullable<bool> value);
    partial void OnInfusionChanged();
    partial void OnOnrequestChanging(System.Nullable<bool> value);
    partial void OnOnrequestChanged();
    partial void OnSolutionChanging(System.Nullable<bool> value);
    partial void OnSolutionChanged();
    partial void OnIsTemplateChanging(System.Nullable<bool> value);
    partial void OnIsTemplateChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnTPNChanging(System.Nullable<bool> value);
    partial void OnTPNChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnFrequencyChanging(System.Nullable<int> value);
    partial void OnFrequencyChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnTimeChanging(System.Nullable<int> value);
    partial void OnTimeChanged();
    partial void OnAdjustLengthChanging(System.Nullable<int> value);
    partial void OnAdjustLengthChanged();
    partial void OnAdjustWeightChanging(System.Nullable<int> value);
    partial void OnAdjustWeightChanged();
    partial void OnDrugIdChanging(System.Nullable<int> value);
    partial void OnDrugIdChanged();
    partial void OnMedicineIdChanging(System.Nullable<int> value);
    partial void OnMedicineIdChanged();
    #endregion
		
		public Prescription()
		{
			this._Doses = new EntitySet<Dose>(new Action<Dose>(this.attach_Doses), new Action<Dose>(this.detach_Doses));
			this._UnitValue = default(EntityRef<UnitValue>);
			this._Medicine = default(EntityRef<Medicine>);
			this._UnitValue1 = default(EntityRef<UnitValue>);
			this._UnitValue2 = default(EntityRef<UnitValue>);
			this._UnitValue3 = default(EntityRef<UnitValue>);
			this._UnitValue4 = default(EntityRef<UnitValue>);
			this._UnitValue5 = default(EntityRef<UnitValue>);
			this._UnitValue6 = default(EntityRef<UnitValue>);
			this._Patient = default(EntityRef<Patient>);
			this._Drug = default(EntityRef<Drug>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int")]
		public System.Nullable<int> PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Continuous", DbType="Bit")]
		public System.Nullable<bool> Continuous
		{
			get
			{
				return this._Continuous;
			}
			set
			{
				if ((this._Continuous != value))
				{
					this.OnContinuousChanging(value);
					this.SendPropertyChanging();
					this._Continuous = value;
					this.SendPropertyChanged("Continuous");
					this.OnContinuousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Infusion", DbType="Bit")]
		public System.Nullable<bool> Infusion
		{
			get
			{
				return this._Infusion;
			}
			set
			{
				if ((this._Infusion != value))
				{
					this.OnInfusionChanging(value);
					this.SendPropertyChanging();
					this._Infusion = value;
					this.SendPropertyChanged("Infusion");
					this.OnInfusionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Onrequest", DbType="Bit")]
		public System.Nullable<bool> Onrequest
		{
			get
			{
				return this._Onrequest;
			}
			set
			{
				if ((this._Onrequest != value))
				{
					this.OnOnrequestChanging(value);
					this.SendPropertyChanging();
					this._Onrequest = value;
					this.SendPropertyChanged("Onrequest");
					this.OnOnrequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="Bit")]
		public System.Nullable<bool> Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTemplate", DbType="Bit")]
		public System.Nullable<bool> IsTemplate
		{
			get
			{
				return this._IsTemplate;
			}
			set
			{
				if ((this._IsTemplate != value))
				{
					this.OnIsTemplateChanging(value);
					this.SendPropertyChanging();
					this._IsTemplate = value;
					this.SendPropertyChanged("IsTemplate");
					this.OnIsTemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(MAX)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TPN", DbType="Bit")]
		public System.Nullable<bool> TPN
		{
			get
			{
				return this._TPN;
			}
			set
			{
				if ((this._TPN != value))
				{
					this.OnTPNChanging(value);
					this.SendPropertyChanging();
					this._TPN = value;
					this.SendPropertyChanged("TPN");
					this.OnTPNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int")]
		public System.Nullable<int> Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					if (this._UnitValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					if (this._UnitValue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					if (this._UnitValue2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					if (this._UnitValue3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int")]
		public System.Nullable<int> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					if (this._UnitValue4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustLength", DbType="Int")]
		public System.Nullable<int> AdjustLength
		{
			get
			{
				return this._AdjustLength;
			}
			set
			{
				if ((this._AdjustLength != value))
				{
					if (this._UnitValue5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustLengthChanging(value);
					this.SendPropertyChanging();
					this._AdjustLength = value;
					this.SendPropertyChanged("AdjustLength");
					this.OnAdjustLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdjustWeight", DbType="Int")]
		public System.Nullable<int> AdjustWeight
		{
			get
			{
				return this._AdjustWeight;
			}
			set
			{
				if ((this._AdjustWeight != value))
				{
					if (this._UnitValue6.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdjustWeightChanging(value);
					this.SendPropertyChanging();
					this._AdjustWeight = value;
					this.SendPropertyChanged("AdjustWeight");
					this.OnAdjustWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugId", DbType="Int")]
		public System.Nullable<int> DrugId
		{
			get
			{
				return this._DrugId;
			}
			set
			{
				if ((this._DrugId != value))
				{
					if (this._Drug.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugIdChanging(value);
					this.SendPropertyChanging();
					this._DrugId = value;
					this.SendPropertyChanged("DrugId");
					this.OnDrugIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="Int")]
		public System.Nullable<int> MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Dose", Storage="_Doses", ThisKey="Id", OtherKey="PrescriptionId")]
		public EntitySet<Dose> Doses
		{
			get
			{
				return this._Doses;
			}
			set
			{
				this._Doses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription", Storage="_UnitValue", ThisKey="Frequency", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue
		{
			get
			{
				return this._UnitValue.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._UnitValue.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._Frequency = value.Id;
					}
					else
					{
						this._Frequency = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_Prescription", Storage="_Medicine", ThisKey="MedicineId", OtherKey="Id", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._MedicineId = value.Id;
					}
					else
					{
						this._MedicineId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription1", Storage="_UnitValue1", ThisKey="Quantity", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue1
		{
			get
			{
				return this._UnitValue1.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue1.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue1.Entity = null;
						previousValue.Prescriptions1.Remove(this);
					}
					this._UnitValue1.Entity = value;
					if ((value != null))
					{
						value.Prescriptions1.Add(this);
						this._Quantity = value.Id;
					}
					else
					{
						this._Quantity = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription2", Storage="_UnitValue2", ThisKey="Total", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue2
		{
			get
			{
				return this._UnitValue2.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue2.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue2.Entity = null;
						previousValue.Prescriptions2.Remove(this);
					}
					this._UnitValue2.Entity = value;
					if ((value != null))
					{
						value.Prescriptions2.Add(this);
						this._Total = value.Id;
					}
					else
					{
						this._Total = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription3", Storage="_UnitValue3", ThisKey="Rate", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue3
		{
			get
			{
				return this._UnitValue3.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue3.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue3.Entity = null;
						previousValue.Prescriptions3.Remove(this);
					}
					this._UnitValue3.Entity = value;
					if ((value != null))
					{
						value.Prescriptions3.Add(this);
						this._Rate = value.Id;
					}
					else
					{
						this._Rate = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription4", Storage="_UnitValue4", ThisKey="Time", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue4
		{
			get
			{
				return this._UnitValue4.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue4.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue4.Entity = null;
						previousValue.Prescriptions4.Remove(this);
					}
					this._UnitValue4.Entity = value;
					if ((value != null))
					{
						value.Prescriptions4.Add(this);
						this._Time = value.Id;
					}
					else
					{
						this._Time = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue4");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription5", Storage="_UnitValue5", ThisKey="AdjustLength", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue5
		{
			get
			{
				return this._UnitValue5.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue5.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue5.Entity = null;
						previousValue.Prescriptions5.Remove(this);
					}
					this._UnitValue5.Entity = value;
					if ((value != null))
					{
						value.Prescriptions5.Add(this);
						this._AdjustLength = value.Id;
					}
					else
					{
						this._AdjustLength = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue5");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Prescription6", Storage="_UnitValue6", ThisKey="AdjustWeight", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue6
		{
			get
			{
				return this._UnitValue6.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue6.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue6.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue6.Entity = null;
						previousValue.Prescriptions6.Remove(this);
					}
					this._UnitValue6.Entity = value;
					if ((value != null))
					{
						value.Prescriptions6.Add(this);
						this._AdjustWeight = value.Id;
					}
					else
					{
						this._AdjustWeight = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue6");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_Prescription", Storage="_Drug", ThisKey="DrugId", OtherKey="Id", IsForeignKey=true)]
		public Drug Drug
		{
			get
			{
				return this._Drug.Entity;
			}
			set
			{
				Drug previousValue = this._Drug.Entity;
				if (((previousValue != value) 
							|| (this._Drug.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drug.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Drug.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._DrugId = value.Id;
					}
					else
					{
						this._DrugId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Drug");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doses(Dose entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_Doses(Dose entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Substance")]
	public partial class Substance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ComponentId;
		
		private string _SubstanceName;
		
		private System.Nullable<int> _ComponentConcentration;
		
		private System.Nullable<int> _DrugConcentration;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _CustomIncrement;
		
		private EntityRef<UnitValue> _UnitValue;
		
		private EntityRef<UnitValue> _UnitValue1;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<UnitValue> _UnitValue2;
		
		private EntityRef<UnitValue> _UnitValue3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnComponentIdChanging(int value);
    partial void OnComponentIdChanged();
    partial void OnSubstanceNameChanging(string value);
    partial void OnSubstanceNameChanged();
    partial void OnComponentConcentrationChanging(System.Nullable<int> value);
    partial void OnComponentConcentrationChanged();
    partial void OnDrugConcentrationChanging(System.Nullable<int> value);
    partial void OnDrugConcentrationChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnCustomIncrementChanging(System.Nullable<int> value);
    partial void OnCustomIncrementChanged();
    #endregion
		
		public Substance()
		{
			this._UnitValue = default(EntityRef<UnitValue>);
			this._UnitValue1 = default(EntityRef<UnitValue>);
			this._Component = default(EntityRef<Component>);
			this._UnitValue2 = default(EntityRef<UnitValue>);
			this._UnitValue3 = default(EntityRef<UnitValue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentId", DbType="Int NOT NULL")]
		public int ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubstanceName", DbType="NVarChar(MAX)")]
		public string SubstanceName
		{
			get
			{
				return this._SubstanceName;
			}
			set
			{
				if ((this._SubstanceName != value))
				{
					this.OnSubstanceNameChanging(value);
					this.SendPropertyChanging();
					this._SubstanceName = value;
					this.SendPropertyChanged("SubstanceName");
					this.OnSubstanceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentConcentration", DbType="Int")]
		public System.Nullable<int> ComponentConcentration
		{
			get
			{
				return this._ComponentConcentration;
			}
			set
			{
				if ((this._ComponentConcentration != value))
				{
					if (this._UnitValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentConcentrationChanging(value);
					this.SendPropertyChanging();
					this._ComponentConcentration = value;
					this.SendPropertyChanged("ComponentConcentration");
					this.OnComponentConcentrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugConcentration", DbType="Int")]
		public System.Nullable<int> DrugConcentration
		{
			get
			{
				return this._DrugConcentration;
			}
			set
			{
				if ((this._DrugConcentration != value))
				{
					if (this._UnitValue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugConcentrationChanging(value);
					this.SendPropertyChanging();
					this._DrugConcentration = value;
					this.SendPropertyChanged("DrugConcentration");
					this.OnDrugConcentrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					if (this._UnitValue2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomIncrement", DbType="Int")]
		public System.Nullable<int> CustomIncrement
		{
			get
			{
				return this._CustomIncrement;
			}
			set
			{
				if ((this._CustomIncrement != value))
				{
					if (this._UnitValue3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomIncrementChanging(value);
					this.SendPropertyChanging();
					this._CustomIncrement = value;
					this.SendPropertyChanged("CustomIncrement");
					this.OnCustomIncrementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance", Storage="_UnitValue", ThisKey="ComponentConcentration", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue
		{
			get
			{
				return this._UnitValue.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue.Entity = null;
						previousValue.Substances.Remove(this);
					}
					this._UnitValue.Entity = value;
					if ((value != null))
					{
						value.Substances.Add(this);
						this._ComponentConcentration = value.Id;
					}
					else
					{
						this._ComponentConcentration = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance1", Storage="_UnitValue1", ThisKey="DrugConcentration", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue1
		{
			get
			{
				return this._UnitValue1.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue1.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue1.Entity = null;
						previousValue.Substances1.Remove(this);
					}
					this._UnitValue1.Entity = value;
					if ((value != null))
					{
						value.Substances1.Add(this);
						this._DrugConcentration = value.Id;
					}
					else
					{
						this._DrugConcentration = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Substance", Storage="_Component", ThisKey="ComponentId", OtherKey="Id", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.Substances.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.Substances.Add(this);
						this._ComponentId = value.Id;
					}
					else
					{
						this._ComponentId = default(int);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance2", Storage="_UnitValue2", ThisKey="Quantity", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue2
		{
			get
			{
				return this._UnitValue2.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue2.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue2.Entity = null;
						previousValue.Substances2.Remove(this);
					}
					this._UnitValue2.Entity = value;
					if ((value != null))
					{
						value.Substances2.Add(this);
						this._Quantity = value.Id;
					}
					else
					{
						this._Quantity = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitValue_Substance3", Storage="_UnitValue3", ThisKey="CustomIncrement", OtherKey="Id", IsForeignKey=true)]
		public UnitValue UnitValue3
		{
			get
			{
				return this._UnitValue3.Entity;
			}
			set
			{
				UnitValue previousValue = this._UnitValue3.Entity;
				if (((previousValue != value) 
							|| (this._UnitValue3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitValue3.Entity = null;
						previousValue.Substances3.Remove(this);
					}
					this._UnitValue3.Entity = value;
					if ((value != null))
					{
						value.Substances3.Add(this);
						this._CustomIncrement = value.Id;
					}
					else
					{
						this._CustomIncrement = default(Nullable<int>);
					}
					this.SendPropertyChanged("UnitValue3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _PassCrypt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPassCryptChanging(string value);
    partial void OnPassCryptChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCrypt", DbType="VarChar(32)")]
		public string PassCrypt
		{
			get
			{
				return this._PassCrypt;
			}
			set
			{
				if ((this._PassCrypt != value))
				{
					this.OnPassCryptChanging(value);
					this.SendPropertyChanging();
					this._PassCrypt = value;
					this.SendPropertyChanged("PassCrypt");
					this.OnPassCryptChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
